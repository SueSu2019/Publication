set.seed(2014)
n=30
alpha=c(0.01,0.05,0.1)
count=0
meanlength=vector()

for (i in 1:3){
   length=vector()
   for(j in 1:1000){

     x = rexp(n,1)

     P1= mean(abs(x-mean(x)))/(2*mean(x))                 #Estimate of Pietra ratio
     P2=sapply(1:n, function(i) mean(abs(x[-i]-mean(x[-i])))/(2*mean(x[-i])))
     V=n*P1-(n-1)*P2
     V_bar=mean(V)

     f_log=function(P){
         l_theta=function(P1){

         b=V-P
        #NEWTON'S method to find lambda
        f=function(lambda){sum(b/(1+lambda*b))}
        df=function(lambda){-sum((b/(1+lambda*b))^2)}

        tol=1e-6
        lambda=P
        while(abs(f(lambda))>tol){lambda=lambda-f(lambda)/df(lambda)}
        l=2*sum(log(abs(1+lambda*(V-P))))
        l
        }

 
     P1_s=seq(V_bar, P, length=100)
     l_thetas= sapply(P1_s,l_theta)
  
  
     h=V_bar+(P1_s-V_bar)*(1+l_thetas/(2*n))

     P.final=P1_s[which.min(abs(h-P))]
     b1=V-P.final

   #NEWTON'S method to find lambda2
   f=function(lambda2){sum(b1/(1+lambda2*b1))}
   df=function(lambda2){-sum((b1/(1+lambda2*b1))^2)}

   tol=1e-6
   lambda2=P.final
   while(abs(f(lambda2))>tol){lambda2=lambda2-f(lambda2)/df(lambda2)}
  
   2*sum(log(abs(1+lambda2*b1)))-qchisq(1-alpha[i],1)
     }


  low=0
  up=1
  P_s= seq(low,up,length.out=1000)
  flogs = sapply(P_s,f_log)
  P.choose = P_s[which.min(flogs)]
 
  count=count+1
  print(count)

  upb1=up
  lowb1=P.choose
  P_up = uniroot(f_log,c(lowb1,upb1))$root

  upb2 =P.choose
  lowb2 =low
  P_low = uniroot(f_log,c(lowb2,upb2))$root
  length[j]= P_up - P_low
  }



  meanlength[i]=mean(length)
}
 meanlength













